AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  STAGE:
    Type: String
    Description: Passed in as STAGE env to functions
    Default: prod

Resources:
  # ##############################################################################
  # Front End
  myDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub "${StaticBucket}.s3.${AWS::Region}.amazonaws.com"
            Id: static-bucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
          - Id: api-gateway
            DomainName: !Sub "${BackendApi}.execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
            OriginPath: /Prod
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: static-bucket
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - TargetOriginId: api-gateway
            PathPattern: /api/*
            ViewerProtocolPolicy: redirect-to-https
            # CachingDisabled
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            # AllViewerExceptHostHeader
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'CloudFront OAI for Static App'
  StaticBucket:
    Type: 'AWS::S3::Bucket'
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject 
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${StaticBucket}/*"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  BackendApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"

  # ##############################################################################
  # Functions       

  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SharedLayer
      Description: shared code for our backend
      ContentUri: common-layer
      CompatibleRuntimes:
        - nodejs18.x
      RetentionPolicy: Delete

  productsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.rootHandler
      Runtime: nodejs18.x
      CodeUri: src/Products
      Timeout: 10
      Environment:
        Variables:
          STAGE: !Ref STAGE
      Policies:
        - !Ref dynamoDBPolicy
      Layers:
        - !Ref SharedLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/products
            Method: GET
        ApiID:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/products/{id}
            Method: GET
  OrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.rootHandler
      Runtime: nodejs18.x
      CodeUri: src/Orders
      Timeout: 10
      Environment:
        Variables:
          STAGE: !Ref STAGE
      Policies:
        - !Ref dynamoDBPolicy
      Layers:
        - !Ref SharedLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/orders
            Method: GET
        ApiPost:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/orders
            Method: POST
        ApiID:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/orders/{id}
            Method: GET
        ApiDelete:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/orders/{id}
            Method: DELETE
  shipmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.rootHandler
      Runtime: nodejs18.x
      CodeUri: src/Shipments
      Timeout: 10
      Environment:
        Variables:
          STAGE: !Ref STAGE
      Policies:
        - !Ref dynamoDBPolicy
      Layers:
        - !Ref SharedLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/inventory/shipments
            Method: GET
        ApiPost:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/inventory/shipments
            Method: POST
        ApiID:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/inventory/shipments/{id}
            Method: GET
  inventoryProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.rootHandler
      Runtime: nodejs18.x
      CodeUri: src/InventoryProducts
      Timeout: 10
      Environment:
        Variables:
          STAGE: !Ref STAGE
      Policies:
        - !Ref dynamoDBPolicy
      Layers:
        - !Ref SharedLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/inventory/products
            Method: GET
        ApiPost:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/inventory/products
            Method: POST
        ApiID:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/inventory/products/{id}
            Method: GET
        ApiIDPut:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/inventory/products/{id}
            Method: PUT
  inventoryOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.rootHandler
      Runtime: nodejs18.x
      CodeUri: src/OrderPicking
      Timeout: 10
      Environment:
        Variables:
          STAGE: !Ref STAGE
      Policies:
        - !Ref dynamoDBPolicy
      Layers:
        - !Ref SharedLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/inventory/orders
            Method: GET
        ApiID:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/inventory/orders/{id}
            Method: GET
        ApiIDPatch:
          Type: Api
          Properties:
            RestApiId: !Ref BackendApi
            Path: /api/inventory/orders/{id}
            Method: PATCH

  productsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: products
      PrimaryKey:
        Name: id
        Type: String
  ordersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: orders
      PrimaryKey:
        Name: id
        Type: String
  shipmentsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: shipments
      PrimaryKey:
        Name: id
        Type: String

  dynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: DynamoDBAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
          - dynamodb:PutItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
          - dynamodb:BatchGetItem
          - dynamodb:DescribeTable
          - dynamodb:ConditionCheckItem
          - dynamodb:PartiQLUpdate
          - dynamodb:PartiQLSelect
          - dynamodb:PartiQLInsert
          - dynamodb:PartiQLDelete
          Resource:
          - !GetAtt shipmentsTable.Arn
          - !GetAtt ordersTable.Arn
          - !GetAtt productsTable.Arn

Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${BackendApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  S3BucketSecureURL:
    Value: !Sub "https://${StaticBucket.DomainName}"
    Description: Domain Name of S3 bucket to holding Front End Content
  SiteURL:
    Value: !Sub "https://${myDistribution.DomainName}"
    Description: URL of the Application
  BucketName:
    Value: !Ref StaticBucket
    Description: Name of S3 bucket holding Front End Content. For aws s3 sync
